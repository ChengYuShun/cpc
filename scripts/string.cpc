FUNCTION Split(s : STRING, sep : STRING) RETURNS ARRAY
    DECLARE result : ARRAY[1:LENGTH(s)] OF STRING

    DECLARE from : INTEGER
    DECLARE item : INTEGER

    from <- 1
    item <- 1

    FOR i <- 1 TO LENGTH(s)
        IF MID(s, i, LENGTH(sep)) = sep THEN
            result[item] <- MID(s, from, i-from)
            item <- item + 1
            from <- i + 1
        ENDIF
    NEXT i

    result[item] <- MID(s, from, LENGTH(s)-from+1)

    RETURN result
ENDFUNCTION

FUNCTION Lcase(s : STRING) RETURNS STRING
    DECLARE result : STRING
    result <- ""

    FOR i <- 1 TO LENGTH(s)
        result <- result & LCASE(CHAR(MID(s, i, 1)))
    NEXT i

    RETURN result
ENDFUNCTION

FUNCTION Ucase(s : STRING) RETURNS STRING
    DECLARE result : STRING
    result <- ""

    FOR i <- 1 TO LENGTH(s)
        result <- result & UCASE(CHAR(MID(s, i, 1)))
    NEXT i

    RETURN result
ENDFUNCTION

FUNCTION Trim(s : STRING) RETURNS STRING
    DECLARE len : INTEGER
    len <- LENGTH(s)
    DECLARE result : STRING
    DECLARE c : STRING

    FOR i <- 1 TO len
        c <- MID(s, i, 1)
        IF c <> ' ' THEN
            result <- result & c
        ENDIF
    NEXT i

    RETURN result
ENDFUNCTION

FUNCTION ArrayFromString(s : STRING) RETURNS ARRAY
    DECLARE len : INTEGER
    len <- LENGTH(s)
    DECLARE arr : ARRAY[1:len] OF STRING

    FOR i <- 1 TO len
        arr[i] <- MID(s, i, 1)
    NEXT i

    RETURN arr
ENDFUNCTION
